apiVersion: argoproj.io/v1alpha1
kind: EventSource
metadata:
  name: aws-sqs
  namespace: argo-events
spec:
  template:
    serviceAccountName: event-sa
  sqs:
    example:
      # jsonBody specifies that all event body payload coming from this
      # source will be JSON
      jsonBody: true
      # aws region
      region: us-east-1
      # name of the queue. The eventsource resolves the url of the queue from the queue name.
      queue: test1
      # The duration (in seconds) for which the call waits for a message to arrive in the queue before returning.
      # MUST BE > 0 AND <= 20
      waitTimeSeconds: 20

#    example-without-credentials:
#      # If AWS access credentials are already present on the Pod's IAM role running the EventSource,
#      # the AWS session will utilize the existing config and hence we do not need to provide explicit credentials.
#      region: "us-east-1"
#      queue: "my-fake-queue-2"
#      waitTimeSeconds: 20

#     cross-aws-account:
#       # Make sure AWS access credentials have permissions to "GetQueueUrl", "ReceiveMessage", and "DeleteMessage" of cross account Queue
#       accessKey:
#         key: accesskey
#         name: aws-secret
#       secretKey:
#         key: secretkey
#         name: aws-secret
#       namespace: argo-events
#       region: "us-east-1"
#       # name of queue to monitor
#       queue: "other-queue-name-3"
#       # AWS Account Id that created the queue
#       queueAccountId: "12345678"
#       waitTimeSeconds: 20